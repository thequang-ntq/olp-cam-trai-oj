#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const ll mod = 1e9 + 7;

int n, m, q, u, v;
vector <int> a;
vector <ll> sum;
vector <vector <int>> pairs;
vector <vector <ll>> dp;

void Task() {
    ios_base :: sync_with_stdio(false); cin.tie(0); cout.tie(0);
    if (fopen("test.inp", "r")) {
        freopen("test.inp", "r", stdin);
        freopen("test.out", "w", stdout);
    }
}

void Solve() {
    cin >> n >> m >> q;
    a.resize(m);
    for (int i = 0; i < m; ++i) {
        cin >> a[i];
    }
    pairs.resize(m);
    while (q--) {
        cin >> u >> v;
        u--, v--;
        pairs[u].push_back(v);
        pairs[v].push_back(u);
    }

    dp.resize(n + 9);
    for (int i = 0; i <= n; ++i) {
        dp[i].resize(m + 9);
    }
    sum.resize(n + 9);
    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j < m; ++j) {
            dp[i][j] = 0;
            if (i == a[j]) {
                dp[i][j] = 1;
            }
            else if (i > a[j]) {
                dp[i][j] = sum[i - a[j]];
                for (auto k : pairs[j]) {
                    dp[i][j] = (dp[i][j] - dp[i - a[j]][k] + mod) % mod;
                }
            }
        }
        for (int j = 0; j < m; ++j) {
            sum[i] = (sum[i] + dp[i][j]) % mod;
        }
    }

    cout << sum[n];
}

int main() {
    Task();
    Solve();
}
