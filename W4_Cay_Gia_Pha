#include <bits/stdc++.h>
using namespace std;
using lli = long long;

#pragma GCC optimize("Ofast")
class Tree {
private:
    vector <vector <pair <int, int>>> RMQ;
    void LCA_init(int n, vector <pair <int, int>>& a) {
        RMQ.resize(__lg(n) + 1, vector <pair <int, int>> (n + 1));

        RMQ[0] = a;
        for (int j = 1; (1 << j) <= n; ++j)
            for (int i = 1; i <= n; ++i)
                RMQ[j][i] = min(RMQ[j - 1][i], RMQ[j - 1][i + (1LL << (j - 1))]);
    }

    pair <int, int> find_parent(int x, int y) {
        int k = __lg(y - x + 1);
        return min(RMQ[k][x], RMQ[k][y - (1 << k) + 1]);
    }
public:
    vector <int> a, in, pxor, parent, depth;
    vector <vector <int>> graph;
    vector <pair <int, int>> EULER;
    int n, timeDFS = 0;

    Tree(int n): n(n), a(n + 1), in(n + 1), pxor(n + 1), parent(n + 1), depth(n + 1), graph(n + 1) {}
    void DFS(int u) {
        in[u] = ++timeDFS;
        EULER.emplace_back(depth[u], u);
        for (int v : graph[u]) {
            if (parent[u] == v) continue;

            parent[v] = u;
            pxor[v] = pxor[u] ^ a[v];
            depth[v] = depth[u] + 1;
            DFS(v);
            EULER.emplace_back(depth[u], u);

            ++timeDFS;
        }
    }
    void init() {
        parent[0] = parent[1] = 0;
        depth[1] = 1;
        pxor[1] = a[1];

        DFS(1);
        LCA_init(timeDFS, EULER);
    }

    void addEdge(int u, int v) {
        graph[u].emplace_back(v);
        graph[v].emplace_back(u);
    }

    int find_lca(int u, int v) {
        int x = in[u];
        int y = in[v];
        if (x > y) swap(x, y);
        return find_parent(x, y).second;
    }
};

void maximise(int& x, int y) {
    if (x < y) x = y;
}

int THRESHOLD = 1000;
int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    int n; cin >> n;
    Tree tree(n);
    for (int i = 1; i <= n; ++i) cin >> tree.a[i];

    for (int i = 1; i < n; ++i) {
        int u, v; cin >> u >> v;
        tree.addEdge(u, v);
    }

    tree.init();
    int ans = *max_element(tree.a.begin(), tree.a.end());
    for (int u = 1; u < n; ++u)
        for (int v = u + 1; v <= n; ++v) {
            int t = n <= THRESHOLD ? tree.find_lca(u, v) : 1;
            maximise(ans, tree.pxor[u] ^ tree.pxor[v] ^ tree.pxor[t] ^ tree.pxor[tree.parent[t]]);
        }
    cout << ans;
    return 0;
}
